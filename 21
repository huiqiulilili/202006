class MyQueue {
    private Stack<Integer> stack1 = new Stack<>();
    private Stack<Integer> stack2 = new Stack<>();

    /** Initialize your data structure here. */
    public MyQueue() {
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        stack1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        int size1 = stack1.size();
        for(int i = 0;i < size1 - 1;i ++) {
            int num = stack1.pop();
            stack2.push(num);
        }
        int num =  stack1.pop();
        int size2 = stack2.size();
        for(int i = 0;i < size2;i ++) {
            int m = stack2.pop();
            stack1.push(m);
        }
        return num;
        
    }
    
    /** Get the front element. */
    public int peek() {
        int size1 = stack1.size();
        for(int i = 0;i < size1 - 1;i ++) {
            int num = stack1.pop();
            stack2.push(num);
        } 
        int num =  stack1.pop();
        stack2.push(num);

        int size2 = stack2.size();
        for(int i = 0;i < size2 ;i ++) {
            int m = stack2.pop();
            stack1.push(m);
        }
        return num;
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        if(stack1.size() == 0 && stack2.size() == 0) {
            return true;
        }
        return false;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
